{"version":3,"sources":["Download.js","App.js","serviceWorker.js","index.js"],"names":["Download","props","handleClick","e","downloadUrl","blob","Blob","state","txt","type","URL","revokeObjectURL","createObjectURL","data","window","link","document","createElement","href","download","click","event","this","setState","target","value","className","onChange","handleChange","bind","onBlur","handleBlur","onClick","Component","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2SAyEeA,G,kBArEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAORC,YAAc,SAAAC,GAEZ,IAAIC,EAAc,KAGdC,EAAO,IAAIC,KACb,CAAC,EAAKC,MAAMC,KACZ,CACEC,KAAM,uBAKNL,GACFM,IAAIC,gBAAgBP,GAOtBA,EAAcM,IAAIE,gBAAgBP,GAGlC,IAAMQ,EAAOC,OAAOJ,IAAIE,gBAAgBP,GACpCU,EAAOC,SAASC,cAAc,KAClCF,EAAKG,KAAOL,EACZE,EAAKI,SAAW,WAChBJ,EAAKK,SAjCL,EAAKb,MAAQ,CACXC,IAAK,IAJU,E,gHAwCNa,GACXC,KAAKC,SAAS,CAAEf,IAAKa,EAAMG,OAAOC,U,+BAE1B,IAAD,OACP,OACE,6BACE,yDACA,6BACA,6BACA,6BACA,8BACE,yBAAKC,UAAU,eACb,8BACEC,SAAUL,KAAKM,aAAaC,KAAKP,MACjCG,MAAOH,KAAKf,MAAMC,IAClBsB,OAAQR,KAAKS,WAAWF,KAAKP,QAE/B,6BACA,6BACA,4BAAQI,UAAU,SAASM,QAAS,SAAA7B,GAAC,OAAI,EAAKD,YAAYC,KAA1D,yC,GA5DW8B,c,MCURC,MARf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,QCIcS,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxB,SAASyB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.feb3464a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Download.css\";\r\n\r\nclass Download extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      txt: \"\"\r\n    };\r\n    //this.handleClick = this.handleClick.bind(this);\r\n  }\r\n  handleClick = e => {\r\n    //create downloadUrl\r\n    let downloadUrl = null;\r\n\r\n    // Create a javascript blob representation of input.\r\n    let blob = new Blob(\r\n      [this.state.txt], // Blob parts.\r\n      {\r\n        type: \"application/msword\"\r\n      }\r\n    );\r\n\r\n    // revoke if url already exists\r\n    if (downloadUrl) {\r\n      URL.revokeObjectURL(downloadUrl);\r\n    }\r\n    // Create an addressable version of the blob.\r\n    // --\r\n    // CAUTION: At this point, the URL has been allocated and the blob will be\r\n    // kept in the document memory space until the document is unloaded or the\r\n    // URL is explicitly released (see above).\r\n    downloadUrl = URL.createObjectURL(blob);\r\n\r\n    // Tie the addressable version of the blob to the download link.\r\n    const data = window.URL.createObjectURL(blob);\r\n    let link = document.createElement(\"a\");\r\n    link.href = data;\r\n    link.download = \"data.doc\";\r\n    link.click();\r\n  };\r\n  handleBlur() {}\r\n\r\n  handleChange(event) {\r\n    this.setState({ txt: event.target.value });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Macy's file download Demo</h1>\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <form>\r\n          <div className=\"formContent\">\r\n            <textarea\r\n              onChange={this.handleChange.bind(this)}\r\n              value={this.state.txt}\r\n              onBlur={this.handleBlur.bind(this)}\r\n            ></textarea>\r\n            <br />\r\n            <br />\r\n            <button className=\"Button\" onClick={e => this.handleClick(e)}>\r\n              Download Data as Word Document\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Download;\r\n","import React from \"react\";\n//import logo from './logo.svg';\nimport Download from \"./Download\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Download />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}